package com.lyf.bookreader.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lyf.bookreader.javabean.Book;

// THIS CODE IS  GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK".
*/
public class BookDao extends AbstractDao<Book, Long> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Bookname = new Property(1, String.class, "bookname", false, "BOOKNAME");
        public final static Property Page = new Property(2, int.class, "page", false, "PAGE");
        public final static Property Chaptername = new Property(3, String.class, "chaptername", false, "CHAPTERNAME");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
    };


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"BOOKNAME\" TEXT," + // 1: bookname
                "\"PAGE\" INTEGER NOT NULL ," + // 2: page
                "\"CHAPTERNAME\" TEXT," + // 3: chaptername
                "\"CONTENT\" TEXT);"); // 4: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Book entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String bookname = entity.getBookname();
        if (bookname != null) {
            stmt.bindString(2, bookname);
        }
        stmt.bindLong(3, entity.getPage());
 
        String chaptername = entity.getChaptername();
        if (chaptername != null) {
            stmt.bindString(4, chaptername);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String bookname = entity.getBookname();
        if (bookname != null) {
            stmt.bindString(2, bookname);
        }
        stmt.bindLong(3, entity.getPage());
 
        String chaptername = entity.getChaptername();
        if (chaptername != null) {
            stmt.bindString(4, chaptername);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookname
            cursor.getInt(offset + 2), // page
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // chaptername
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setBookname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPage(cursor.getInt(offset + 2));
        entity.setChaptername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Book entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Book entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
