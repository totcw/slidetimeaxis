package com.lyf.bookreader.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lyf.bookreader.javabean.RecentlyRead;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECENTLY_READ".
*/
public class RecentlyReadDao extends AbstractDao<RecentlyRead, Long> {

    public static final String TABLENAME = "RECENTLY_READ";

    /**
     * Properties of entity RecentlyRead.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Bookname = new Property(1, String.class, "bookname", false, "BOOKNAME");
        public final static Property Author = new Property(2, String.class, "author", false, "AUTHOR");
        public final static Property Time = new Property(3, String.class, "time", false, "TIME");
        public final static Property Finish = new Property(4, String.class, "finish", false, "FINISH");
        public final static Property Img = new Property(5, String.class, "img", false, "IMG");
        public final static Property CurPage = new Property(6, int.class, "curPage", false, "CUR_PAGE");
        public final static Property MBeginPos = new Property(7, int.class, "mBeginPos", false, "M_BEGIN_POS");
        public final static Property MEndPos = new Property(8, int.class, "mEndPos", false, "M_END_POS");
        public final static Property Total = new Property(9, int.class, "total", false, "TOTAL");
        public final static Property Type = new Property(10, String.class, "type", false, "TYPE");
    };


    public RecentlyReadDao(DaoConfig config) {
        super(config);
    }
    
    public RecentlyReadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECENTLY_READ\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BOOKNAME\" TEXT," + // 1: bookname
                "\"AUTHOR\" TEXT," + // 2: author
                "\"TIME\" TEXT," + // 3: time
                "\"FINISH\" TEXT," + // 4: finish
                "\"IMG\" TEXT," + // 5: img
                "\"CUR_PAGE\" INTEGER NOT NULL ," + // 6: curPage
                "\"M_BEGIN_POS\" INTEGER NOT NULL ," + // 7: mBeginPos
                "\"M_END_POS\" INTEGER NOT NULL ," + // 8: mEndPos
                "\"TOTAL\" INTEGER NOT NULL ," + // 9: total
                "\"TYPE\" TEXT);"); // 10: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECENTLY_READ\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecentlyRead entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookname = entity.getBookname();
        if (bookname != null) {
            stmt.bindString(2, bookname);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String finish = entity.getFinish();
        if (finish != null) {
            stmt.bindString(5, finish);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(6, img);
        }
        stmt.bindLong(7, entity.getCurPage());
        stmt.bindLong(8, entity.getMBeginPos());
        stmt.bindLong(9, entity.getMEndPos());
        stmt.bindLong(10, entity.getTotal());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(11, type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecentlyRead entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookname = entity.getBookname();
        if (bookname != null) {
            stmt.bindString(2, bookname);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String finish = entity.getFinish();
        if (finish != null) {
            stmt.bindString(5, finish);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(6, img);
        }
        stmt.bindLong(7, entity.getCurPage());
        stmt.bindLong(8, entity.getMBeginPos());
        stmt.bindLong(9, entity.getMEndPos());
        stmt.bindLong(10, entity.getTotal());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(11, type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecentlyRead readEntity(Cursor cursor, int offset) {
        RecentlyRead entity = new RecentlyRead( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // author
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // finish
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // img
            cursor.getInt(offset + 6), // curPage
            cursor.getInt(offset + 7), // mBeginPos
            cursor.getInt(offset + 8), // mEndPos
            cursor.getInt(offset + 9), // total
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecentlyRead entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAuthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFinish(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCurPage(cursor.getInt(offset + 6));
        entity.setMBeginPos(cursor.getInt(offset + 7));
        entity.setMEndPos(cursor.getInt(offset + 8));
        entity.setTotal(cursor.getInt(offset + 9));
        entity.setType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecentlyRead entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecentlyRead entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
